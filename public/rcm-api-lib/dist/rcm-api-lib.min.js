/*! rcm-api-lib 2015-07-28 */

angular.module("rcmApiLib",[]),angular.module("rcmApiLib").factory("rcmApiLibApiParams",function($http,$log){return function(){this.url="",this.urlParams=null,this.data=null,this.params=null,this.loading=function(loading){},this.success=function(data){},this.error=function(data){}}}),angular.module("rcmApiLib").factory("rcmApiLibApiData",function($http,$log){return function(){var self=this;self.data=null,self.messages=[],self.getPrimaryMessage=function(){return self.messages.length>0?self.messages[0]:null}}}),angular.module("rcmApiLib").factory("rcmApiLibApiMessage",function($http,$log){return function(){var self=this;self.type="rcmApiLib",self.source="client",self.code="error",self.value="An unknown error occured while making request",self.primary=null,self.params=[],self.key=[],self.level="warning",self.buildKey=function(){self.key=self.type+"."+self.source+"."+self.code},self.init=function(){self.buildKey()},self.init()}}),angular.module("rcmApiLib").factory("rcmApiLibService",["$http","$log","rcmApiLibApiData","rcmApiLibApiMessage","rcmApiLibApiParams",function($http,$log,rcmApiLibApiData,rcmApiLibApiMessage,rcmApiLibApiParams){var self=this;return self.cache={},self.ApiParams=rcmApiLibApiParams,self.ApiData=rcmApiLibApiData,self.ApiMessage=rcmApiLibApiMessage,self.getCached=function(apiParams,cacheId){apiParams=self.buildApiParams(apiParams),apiParams.loading(!0),cacheId||(cacheId=apiParams.url),self.getCache(cacheId,function(cacheData){self.apiSuccess(self.cache[apiParams.url],apiParams,"CACHE",null,null)},function(){apiParams.cacheId=cacheId,self.get(apiParams)})},self.get=function(apiParams){apiParams=self.buildApiParams(apiParams),apiParams.loading(!0),$http({method:"GET",url:apiParams.url,params:apiParams.params}).success(function(data,status,headers,config){self.apiSuccess(data,apiParams,status,headers,config)}).error(function(data,status,headers,config){self.apiError(data,apiParams,status,headers,config)})},self.post=function(apiParams){apiParams=self.buildApiParams(apiParams),apiParams.loading(!0),$http({method:"POST",url:apiParams.url,data:apiParams.data}).success(function(data,status,headers,config){self.apiSuccess(data,apiParams,status,headers,config)}).error(function(data,status,headers,config){self.apiError(data,apiParams,status,headers,config)})},self.patch=function(apiParams){apiParams=self.buildApiParams(apiParams),apiParams.loading(!0),$http({method:"PATCH",url:apiParams.url,data:apiParams.data}).success(function(data,status,headers,config){self.apiSuccess(data,apiParams,status,headers,config)}).error(function(data,status,headers,config){self.apiError(data,apiParams,status,headers,config)})},self.put=function(apiParams){apiParams=self.buildApiParams(apiParams),apiParams.loading(!0),$http({method:"PUT",url:apiParams.url,data:apiParams.data}).success(function(data,status,headers,config){self.apiSuccess(data,apiParams,status,headers,config)}).error(function(data,status,headers,config){self.apiError(data,apiParams,status,headers,config)})},self.del=function(apiParams){apiParams=self.buildApiParams(apiParams),apiParams.loading(!0),$http({method:"DELETE",url:apiParams.url,data:apiParams.data}).success(function(data,status,headers,config){self.apiSuccess(data,apiParams,status,headers,config)}).error(function(data,status,headers,config){self.apiError(data,apiParams,status,headers,config)})},self.buildApiParams=function(apiParams){return apiParams=angular.extend(new self.ApiParams,apiParams),apiParams.url=self.formatUrl(apiParams.url,apiParams.urlParams),apiParams},self.formatUrl=function(str,urlParams){if("object"!=typeof urlParams||null===urlParams)return str;for(var arg in urlParams)str=str.replace(RegExp("\\{"+arg+"\\}","gi"),urlParams[arg]);return str},self.setCache=function(cacheId,data){cacheId&&(self.cache[cacheId]=angular.copy(data))},self.getCache=function(cacheId,cacheCallback,noCacheCallback){var cacheData=self.cache[cacheId];cacheData?cacheCallback(cacheData):noCacheCallback()},self.apiError=function(data,apiParams,status,headers,config){$log.error("An API error occured, status: "+status+" returned: ",data),self.prepareErrorData(data,apiParams,function(data){apiParams.loading(!1),apiParams.error(data)},status)},self.apiSuccess=function(data,apiParams,status,headers,config){200!=status||"object"!=typeof data?self.prepareErrorData(data,apiParams,function(data){apiParams.loading(!1),apiParams.error(data)},status):self.prepareData(data,apiParams,function(data){self.setCache(apiParams.cacheId,data),apiParams.loading(!1),apiParams.success(data)})},self.prepareErrorData=function(data,apiParams,callback,status){if(("object"!=typeof data||null===data)&&(data=new self.ApiData),data.messages||(data.messages=[]),data.messages.length<1){var message=new self.ApiMessage;data.messages.primary=!0,data.messages=[message]}self.prepareData(data,apiParams,callback)},self.prepareData=function(data,apiParams,callback){data=angular.extend(new self.ApiData,data),callback(data)},self}]);var rcmApiLib={rcmApiLibService:null};angular.injector(["ng","rcmApiLib"]).invoke(["rcmApiLibService",function(rcmApiLibService){rcmApiLib.rcmApiLibService=rcmApiLibService}]),angular.module("rcmApiLib").factory("rcmApiLibMessageService",["$log","rcmApiLibApiMessage",function($log,rcmApiLibApiMessage){var self=this;return self.messages=[],self.addMessage=function(message){message=angular.extend(new rcmApiLibApiMessage,message),self.messages.push(message)},self.addMessages=function(messages){angular.forEach(messages,function(message,key){self.addMessage(message)})},self.buildPrimaryMessage=function(messages){self.getPrimaryMessage(messages,function(primaryMessage){primaryMessage&&self.addMessage(primaryMessage)})},self.clearMessages=function(){self.messages=[]},self.getDefaultMessage=function(){return new rcmApiLibApiMessage},self.getPrimaryMessage=function(messages,callback){var primaryMessage=null;return messages[0]&&(primaryMessage=messages[0]),callback(primaryMessage),primaryMessage},self.getTypeMessages=function(messages,type,callback){var typeMessages={};return angular.forEach(messages,function(message,key){message.type==type&&(this[message.source]=message.value)},typeMessages),callback(typeMessages),typeMessages},self}]),angular.module("rcmApiLib").directive("rcmApiLibMessageDirective",["$log","rcmApiLibMessageService",function($log,rcmApiLibMessageService){var link=function($scope,elm){$scope.$watch(function(){return rcmApiLibMessageService.messages},function(){$scope.messages=rcmApiLibMessageService.messages,elm[0].scrollIntoView(!0)}),$scope.messages=rcmApiLibMessageService.messages};return{link:link,template:'<div class="alert alert-{{messages[0].level}}" ng-hide="messages.length < 1" role="alert"> <div class="message" ng-repeat="message in messages">{{message.value}}</div></div>'}}]);
//# sourceMappingURL=rcm-api-lib.min.js.map