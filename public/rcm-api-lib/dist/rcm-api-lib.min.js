/*! rcm-api-lib 2016-05-31 */

angular.module("rcmApiLib",["RcmJsLib"]),angular.module("rcmApiLib").value("rcmApiLibServiceConfig",{defaultMessage:"An unknown error occurred while making request"}),angular.module("rcmApiLib").factory("rcmApiLibApiParams",function($http,$log){return function(){var self=this;self.url="",self.urlParams=null,self.data=null,self.params=null,self.responseTypes=["object","array","null"],self.loading=function(loading){},self.success=function(data){},self.error=function(data){},self.populate=function(apiParams){angular.forEach(apiParams,function(value,key){"function"==typeof self[key]&&"function"==typeof value&&(self[key]=value),"function"!=typeof self[key]&&"function"!=typeof value&&(self[key]=value)})}}}),angular.module("rcmApiLib").factory("rcmApiLibApiData",function($http,$log){return function(){var self=this;self.data=null,self.messages=[],self.getPrimaryMessage=function(){return self.messages.length>0?self.messages[0]:null}}}),angular.module("rcmApiLib").factory("rcmApiLibApiMessage",["rcmApiLibServiceConfig",function(rcmApiLibServiceConfig){return function(value){var self=this;self.type="rcmApiLib",self.source="client",self.code="error",self.value=rcmApiLibServiceConfig.defaultMessage,self.primary=null,self.params=[],self.key="",self.level="warning",self.buildKey=function(){self.key=self.type+"."+self.source+"."+self.code},self.init=function(value){self.buildKey(),value&&(self.value=value)},self.init(value)}}]),angular.module("rcmApiLib").factory("rcmApiLibService",["$http","$log","rcmApiLibServiceConfig","rcmApiLibApiData","rcmApiLibApiMessage","rcmApiLibApiParams",function($http,$log,rcmApiLibServiceConfig,rcmApiLibApiData,rcmApiLibApiMessage,rcmApiLibApiParams){var self=this;return self.config=rcmApiLibServiceConfig,self.cache={},self.ApiParams=rcmApiLibApiParams,self.ApiData=rcmApiLibApiData,self.ApiMessage=rcmApiLibApiMessage,self.getCached=function(apiParams,cacheId){apiParams=self.buildApiParams(apiParams),apiParams.loading(!0),cacheId||(cacheId=apiParams.url),self.getCache(cacheId,function(cacheData){self.apiSuccess(self.cache[apiParams.url],apiParams,"CACHE",null,null)},function(){apiParams.cacheId=cacheId,self.get(apiParams)})},self.get=function(apiParams){apiParams=self.buildApiParams(apiParams),apiParams.loading(!0),$http({method:"GET",url:apiParams.url,params:apiParams.params}).success(function(data,status,headers,config){self.apiSuccess(data,apiParams,status,headers,config)}).error(function(data,status,headers,config){self.apiError(data,apiParams,status,headers,config)})},self.post=function(apiParams){apiParams=self.buildApiParams(apiParams),apiParams.loading(!0),$http({method:"POST",url:apiParams.url,data:apiParams.data,params:apiParams.params}).success(function(data,status,headers,config){self.apiSuccess(data,apiParams,status,headers,config)}).error(function(data,status,headers,config){self.apiError(data,apiParams,status,headers,config)})},self.patch=function(apiParams){apiParams=self.buildApiParams(apiParams),apiParams.loading(!0),$http({method:"PATCH",url:apiParams.url,data:apiParams.data,params:apiParams.params}).success(function(data,status,headers,config){self.apiSuccess(data,apiParams,status,headers,config)}).error(function(data,status,headers,config){self.apiError(data,apiParams,status,headers,config)})},self.put=function(apiParams){apiParams=self.buildApiParams(apiParams),apiParams.loading(!0),$http({method:"PUT",url:apiParams.url,data:apiParams.data,params:apiParams.params}).success(function(data,status,headers,config){self.apiSuccess(data,apiParams,status,headers,config)}).error(function(data,status,headers,config){self.apiError(data,apiParams,status,headers,config)})},self.del=function(apiParams){apiParams=self.buildApiParams(apiParams),apiParams.loading(!0),$http({method:"DELETE",url:apiParams.url,data:apiParams.data,params:apiParams.params}).success(function(data,status,headers,config){self.apiSuccess(data,apiParams,status,headers,config)}).error(function(data,status,headers,config){self.apiError(data,apiParams,status,headers,config)})},self.buildApiParams=function(apiParams){var apiParamsObject=new self.ApiParams;return apiParamsObject.populate(apiParams),apiParamsObject.url=self.formatUrl(apiParamsObject.url,apiParamsObject.urlParams),apiParamsObject},self.formatUrl=function(str,urlParams){if("object"!=typeof urlParams||null===urlParams)return str;for(var arg in urlParams)str=str.replace(RegExp("\\{"+arg+"\\}","gi"),urlParams[arg]);return str},self.setCache=function(cacheId,data){cacheId&&(self.cache[cacheId]=angular.copy(data))},self.getCache=function(cacheId,cacheCallback,noCacheCallback){var cacheData=self.cache[cacheId];cacheData?cacheCallback(cacheData):noCacheCallback()},self.apiError=function(data,apiParams,status,headers,config){$log.error("An API error occurred, status: "+status+" returned: ",data),self.prepareErrorData(data,apiParams,function(data){apiParams.loading(!1),apiParams.error(data,status,headers,config)},status)},self.apiSuccess=function(data,apiParams,status,headers,config){200==status&&self.isValidDataType(data,apiParams)?self.prepareData(data,apiParams,function(data){self.setCache(apiParams.cacheId,data),apiParams.loading(!1),apiParams.success(data,status,headers,config)}):($log.error("API returned responseType ("+self.getDataType(data)+") that is not supported or invalid status ("+status+") data: ",data),self.prepareErrorData(data,apiParams,function(data){apiParams.loading(!1),apiParams.error(data,status,headers,config)},status))},self.prepareErrorData=function(data,apiParams,callback,status){var preparedData=self.buildValidDataFormat(data);if(preparedData.messages.length<1){var message=new self.ApiMessage(self.config.defaultMessage);preparedData.messages.primary=!0,preparedData.messages=[message]}callback(preparedData)},self.prepareData=function(data,apiParams,callback){callback(self.buildValidDataFormat(data))},self.isValidDataType=function(data,apiParams){var dataType=self.getDataType(data);return apiParams.responseTypes.indexOf(dataType)>-1},self.getDataType=function(data){return"undefined"==typeof data||null===data?"null":Array.isArray(data)?"array":typeof data},self.buildValidDataFormat=function(data){var preparedData=new self.ApiData;return self.isValidDataFormat(data)?preparedData=angular.extend(preparedData,data):(preparedData.data=data,preparedData)},self.isValidDataFormat=function(data){return"object"!=typeof data||null===data?!1:"undefined"!=typeof data.messages&&"undefined"!=typeof data.data&&typeof Array.isArray(data.messages)},self}]);var rcmApiLib={rcmApiLibService:null};angular.injector(["ng","rcmApiLib"]).invoke(["rcmApiLibService",function(rcmApiLibService){rcmApiLib.rcmApiLibService=rcmApiLibService}]),angular.module("rcmApiLib").factory("rcmApiLibMessageService",["rcmApiLibApiMessage","RcmEventManagerClass",function(rcmApiLibApiMessage,RcmEventManagerClass){var self=this,eventManager=new RcmEventManagerClass;self.messages={},self.getEventManager=function(){return eventManager};var getNamespace=function(namespace){return"string"!=typeof namespace&&(namespace="DEFAULT"),namespace},addNamespaceMessage=function(namespace,message){namespace=self.createNamespace(namespace),self.messages[namespace].push(message),eventManager.trigger("rcmApiLibApiMessage.addMessage",{namespace:namespace,message:message})},getNamespaceMessages=function(namespace){return namespace=getNamespace(namespace),self.messages[namespace]?self.messages[namespace]:[]},clearNamespaceMessages=function(namespace){namespace=getNamespace(namespace),self.messages[namespace]=[],eventManager.trigger("rcmApiLibApiMessage.clearMessages",namespace)};return self.createNamespace=function(namespace){return namespace=getNamespace(namespace),self.messages[namespace]||(self.messages[namespace]=[]),eventManager.trigger("rcmApiLibApiMessage.createNamespace",namespace),namespace},self.hasMessages=function(namespace){var messages=getNamespaceMessages(namespace);return messages.length<=0},self.isValidMessage=function(message){return message?message.type&&message.source:!1},self.addMessage=function(message,namespace){return self.isValidMessage(message)?(message=angular.extend(new rcmApiLibApiMessage,message),void addNamespaceMessage(namespace,message)):void console.warn("rcmApiLibApiMessage.addMessage recieved an invalid message",message)},self.addMessages=function(messages,namespace){angular.forEach(messages,function(message,key){self.addMessage(message,namespace)})},self.getMessages=function(namespace){return getNamespaceMessages(namespace)},self.addPrimaryMessage=function(messages,namespace,callback){self.getPrimaryMessage(messages,function(primaryMessage){primaryMessage&&(self.addMessage(primaryMessage,namespace),"function"==typeof callback&&callback(primaryMessage))})},self.buildPrimaryMessage=function(messages,namespace,callback){self.addPrimaryMessage(messages,namespace,callback)},self.clearMessages=function(namespace){clearNamespaceMessages(namespace)},self.getDefaultMessage=function(){return new rcmApiLibApiMessage},self.getPrimaryMessage=function(messages,callback){var primaryMessage=null;return messages&&(primaryMessage=messages[0]),"function"==typeof callback&&callback(primaryMessage),primaryMessage},self.getTypeMessages=function(messages,type,callback){var typeMessages={};return angular.forEach(messages,function(message,key){message.type==type&&(void 0===this[message.source]&&(this[message.source]=[]),this[message.source].push(message.value))},typeMessages),"function"==typeof callback&&callback(typeMessages),typeMessages},self}]),angular.module("rcmApiLib").directive("rcmApiLibMessageDirective",["$log","rcmApiLibMessageService",function($log,rcmApiLibMessageService){var link=function($scope,elm,attrs){var eventManager=rcmApiLibMessageService.getEventManager(),namespace="DEFAULT";attrs.namespace&&(namespace=attrs.namespace),rcmApiLibMessageService.createNamespace(namespace),eventManager.on("rcmApiLibApiMessage.addMessage",function(response){$scope.messages=rcmApiLibMessageService.getMessages(namespace),$scope.messages.length>0&&elm[0].scrollIntoView(!0)},namespace),eventManager.on("rcmApiLibApiMessage.clearMessages",function(response){$scope.messages=[]},namespace),$scope.messages=rcmApiLibMessageService.getMessages(namespace)};return{link:link,scope:{},template:'<div ng-hide="messages.length < 1"> <div ng-repeat="message in messages" class="alert alert-{{message.level}}" role="alert">  <div class="message">{{message.value}}</div> </div></div>'}}]);
//# sourceMappingURL=rcm-api-lib.min.js.map